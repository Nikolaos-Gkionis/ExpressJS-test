var NAVIGATION_CLASS = "p-primary-nav";
var ITEM_LI_CLASS = "p-primary-nav__item--dropdown";
var ITEM_A_CLASS = "p-primary-nav__item-link";
var SUBITEM_CLASS = "p-primary-nav__subitem-link";
var OPEN_CLASS = "p-primary-nav__item--open";
var TOGGLE_MENU_CLASS = "p-primary-nav__toggle-menu";
/**
 * Adds the required JS interactivity for the PrimaryNav component
 */
var PrimaryNav = /** @class */ (function () {
    function PrimaryNav() {
        var _this = this;
        /**
         * @property {HTMLElement} nav The single top-level nav element
         */
        this.nav = null;
        /**
         * @property {HTMLElement} toggleMenuButton The nav toggle button element to open/close the mobile menu
         */
        this.toggleMenuButton = null;
        this.nav = document.querySelector(".".concat(NAVIGATION_CLASS));
        this.toggleMenuButton = document.querySelectorAll(".".concat(TOGGLE_MENU_CLASS));
        this.outsideClickEventListener = function (e) { return _this.handleOutsideClick(e); };
        this.setupListeners();
    }
    /**
     * Sets up the required listeners
     */
    PrimaryNav.prototype.setupListeners = function () {
        var _this = this;
        var _a, _b;
        if (!this.nav)
            return;
        var navItems = (_a = this.nav) === null || _a === void 0 ? void 0 : _a.querySelectorAll(".".concat(ITEM_LI_CLASS));
        navItems.forEach(function (item) {
            item.addEventListener("click", function (event) {
                var currentTarget = event === null || event === void 0 ? void 0 : event.currentTarget;
                var target = event === null || event === void 0 ? void 0 : event.target;
                if (target.classList.contains(SUBITEM_CLASS)) {
                    return;
                }
                else {
                    event.preventDefault();
                    _this.handleNavItemClick(currentTarget);
                }
            });
        });
        (_b = this.toggleMenuButton) === null || _b === void 0 ? void 0 : _b.forEach(function (toggler) {
            toggler.addEventListener("click", function (event) {
                return _this.toggleMobileMenu(event);
            });
        });
    };
    /**
     * Handles the click event for the nav item
     * @param navItemElement The nav item element that has been clicked upon
     */
    PrimaryNav.prototype.handleNavItemClick = function (navItemElement) {
        if (!navItemElement)
            return;
        this.closeOtherSubNavs(navItemElement);
        this.toggleDropdown(navItemElement);
        this.toggleAriaExpanded(navItemElement);
    };
    /**
     * Toggles the classes for the mobile menu open and close
     */
    PrimaryNav.prototype.toggleMobileMenu = function (event) {
        var _a;
        event.preventDefault();
        (_a = this.nav) === null || _a === void 0 ? void 0 : _a.classList.toggle("p-primary-nav--open");
    };
    /**
     * Click handler for clicking outside the navigation
     * @param event The click event
     */
    PrimaryNav.prototype.handleOutsideClick = function (event) {
        var _a;
        if (!event.target.closest(".p-primary-nav")) {
            var navItems = (_a = this.nav) === null || _a === void 0 ? void 0 : _a.querySelectorAll(".".concat(ITEM_LI_CLASS));
            var navItemsArr = Array.from(navItems || []);
            this.closeSubNavs(navItemsArr);
        }
    };
    /**
     * Toggles the OPEN_CLASS class on the clicked element
     * @param navItemElement The nav item element that has been clicked upon
     */
    PrimaryNav.prototype.toggleDropdown = function (navItemElement) {
        navItemElement.classList.toggle(OPEN_CLASS);
        if (this.subNavIsOpen(navItemElement)) {
            // If the nav is being closed, clean up the event listener to prevent memory leaks
            document.removeEventListener("click", this.outsideClickEventListener);
        }
        else {
            // If the nav is being opened, create an event listener
            document.addEventListener("click", this.outsideClickEventListener);
        }
    };
    /**
     * Toggles the aria-expanded attributes depending on the open/closed state of the nav item
     * @param navItemElement The nav item element that has been clicked upon
     */
    PrimaryNav.prototype.toggleAriaExpanded = function (navItemElement) {
        var linkElement = navItemElement.querySelector(".".concat(ITEM_A_CLASS));
        linkElement === null || linkElement === void 0 ? void 0 : linkElement.setAttribute("aria-expanded", this.subNavIsOpen(navItemElement) ? "false" : "true");
    };
    /**
     * Returns the current open/close status on the clicked nav item
     * @param navItemElement The nav item element that has been clicked upon
     */
    PrimaryNav.prototype.subNavIsOpen = function (navItemElement) {
        var linkElement = navItemElement.querySelector(".".concat(ITEM_A_CLASS));
        var isOpen = linkElement === null || linkElement === void 0 ? void 0 : linkElement.getAttribute("aria-expanded");
        if (isOpen === "true") {
            return true;
        }
        return false;
    };
    /**
     * Resets all subnavs apart from the newly clicked one to their original state
     * @param navItemElement The nav item element that has been clicked upon
     */
    PrimaryNav.prototype.closeOtherSubNavs = function (navItemElement) {
        if (!navItemElement.parentNode)
            return;
        var siblings = Array.from(navItemElement.parentNode.children);
        var filteredSiblings = siblings.filter(function (child) { return child !== navItemElement; });
        this.closeSubNavs(filteredSiblings);
    };
    /**
     * Removes the open class and aria-expanded attribute from the subnav elements
     * @param elements The subnav elements that you want to close
     */
    PrimaryNav.prototype.closeSubNavs = function (elements) {
        elements.forEach(function (item) {
            var linkElement = item.querySelector(".".concat(ITEM_A_CLASS));
            item.classList.remove(OPEN_CLASS);
            linkElement === null || linkElement === void 0 ? void 0 : linkElement.setAttribute("aria-expanded", "false");
        });
    };
    return PrimaryNav;
}());
export default PrimaryNav;
//# sourceMappingURL=primaryNav.js.map